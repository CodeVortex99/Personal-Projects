Collections: 
    -> single variable used to store multiple values.
    -> Iterable using for loops to access individua items/elements.

    -> To know the properties of something:
        -> Either User dir(collection/variable/function) or 
            help(collection/variable/function) function
        -> Then it needs to be printed.


    List:

        -> [] ordered and changeable.
        -> Duplicates are allowed.

        -> To access a certain element:
            -> Use the Index Operator
            -> variable[index]
                -> Index starts from 0.
            
            "If the index is out of lists' range:
                -> Error:
                    -> IndexError: list index out of range

            variable[:index] -> can be used to print every element up to the 
                certain index.

            Steps:
                variable[::n] -> can be used to access every nth element from the
                    0 index.

                variable[::-n] -> can be used to reverse the list.

            -> len() can be used to find the length of the collection/list.

            -> We can find if a value is within the collection through the use
                of 'in' function.
                -> For Example: print("element" in variable of collection)
                    -> will output a boolean which can be either used for validation
                         or iteration purposes.
                -> This applies to Sets and Tuples

            -> An element in a list can be changed:
                -> variable[index] = "Changed to the item"

            -> You can append an item to your list through:
                -> name_of_the_list.append("Changed to the item")

            -> You can remove an item from the list through the use of:
                -> variable.remove("Item")

            -> To insert an item to the front of the list:
                -> variable.insert(index, "item")
            -> _________.insert(index, element)
                -> if you want to enter it at the end 
                of list, you can use the length of the primary list as the inhdex.
            -> You can sort a list through the use of:
                -> variable.sort()

            -> You can reverse the list through the use of:
                -> variable.reverse()

            -> You can clear the list through the use of:
                -> variable.clear()

            -> To print the index of an element
                -> print(variable.index("Element/item))
                -> to find the index of an item not in the list:
                    ValueError: 'item' not in the list

            -> to find the number of items in a list:
                -> print(variable.count("item"))

            -> you can store mixed elements within the same list.
            -> Even if two different lists contain the same elements the elements will have 
                the same memory location but the lists themselves won't 
                have the same location in the memory.

            -> _________.extend(list) can be used to add elements from one list to the primary list.
            -> NOTE both .append() and .extend can only take one argument.
                -> You can't pass 2 or more arguments in a list in one go.

            
            

    Set:

        -> {} unordered and immutable, but ADD/Remove OK.
        -> Duplicates not allowed.

        -> You can't find the indexed element of a set as it is unordered.

        -> To add an item/element: variable.add("item")
        -> To remove an element: variable.remove("item")
        -> To remove the first element: variable.pop()
            -> It is always going to be random as a set is unordered.

        -> To clear the set: variable.clear()

    Tuples:

        -> () Ordered and unchangeable.
        -> Duplicates allows.
        -> Faster than lists when its properties are required which are mentioned above.

        -> Made up of parentheses

        -> To find the index of an item:
            -> print(variable.index("item"))

        -> To Count an item:
            -> print(variable.count("item"))

    Dictionaries:

        -> A collection of {key:value} pairs ordered and changeable
        -> No Duplicates

        -> Each key-value pair needs to be seperated by a comma
        
        -> variable.get("key") can be used to access the value of the key.
            -> It can either be printed or used within conditional statements for validation.

        -> using variable.update({"key": "value"})
            -> new key-value pair can be added to the dictionary.
            -> the existing key-value pair can also be changed/updated

        -> variable.pop("key")
            -> can be used to remove a key-value pair from the dictionary.
            -> variable.popitem() will remove the latest key-value pair/item from the dictionary

        -> variable.clear() will remove every key-value pair from the dictionary.

        -> variable.keys() can be used to get a list of object of all the keys
            in the dictionary without their values.

        -> variable.values() can be used to get a list of object of all the values
            in the dictionary without their keys.

            -> it is better to assign the variable.keys() or variable.values() to a variable
                and then printing the variable.

        -> Dictionaries are iterable so, you can print out each seperate key/value 
            using a for loop.

        -> variable.items() can be used to resemble a dictionary object
            out a 2D list of tuples.
            
            -> Furthermore, FOR Loop can be used again to lay out the 
                dictionary in a visually pleasing method, for example:

                -> for key, value in variable.items():
                        print(f"{key}: {value}")
        -> However, this "use a default value if the key is not in the dictionary" pattern is so common, dictionaries provide the get method to do this:
        -> val = d.get(key, 'default')
        -> The first argument to get is the key. If the key is in the dictionary then 
            the corresponding value is returned, otherwise the second argument to get (here 'default') is returned.

    If you want to copy the key-value pairs from one dictionary to another, Python provides the update method:
        d1 = {'a': 1, 'b': 5}
        d2 = {'a': 4, 'c': 6}
        d1.update(d2)
        print(d1)

        Output: {'a': 4, 'c': 6, 'b': 5}

â€‹           #Notice that not only does the new key 'c' have the 
                value 6 from d2, but the value for 'a' has also been updated to the value from d2.  

If I want to check if any of the elements in a certain list is in the Input:
    -> if any(item in list for item in Input): ...
    -> This condition also works with all instead of any.